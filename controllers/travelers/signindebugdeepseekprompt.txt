import 'dotenv/config'
import e from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname } from 'path'; 
import path from 'path';
import session from 'express-session';
import connectPgSimple from 'connect-pg-simple';
import pool from './db.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const PostgreSQLStore = connectPgSimple(session);

import signUpTravelerRoute from './routes/travelers/signUpTravelerRoute.js';
import signInTravelerRoute from './routes/travelers/signInTravelerRoute.js';

const app = e();
app.use(cors());
app.use(e.json());
app.use(e.static(path.join(__dirname, "public")));
app.use(session({
    store: new PostgreSQLStore({
        pool: pool,
        tableName: 'session-store_table',
        createTableIfMissing: true
    }),
    secret: [
        process.env.SESSION_Secret_1, 
        process.env.SESSION_Secret_2,
        process.env.SESSION_Secret_3, 
        process.env.SESSION_Secret_4, 
        process.env.SESSION_Secret_5
    ],
    resave: false,
    saveUninitialized: true,
    cookie: {
        secure: process.env.ENV_IsInProd,
        maxAge: 86400000, // 1h
        httpOnly: true
    }
}));

const PORT = process.env.PORT || 3001;

app.use(signUpTravelerRoute);
app.use(signInTravelerRoute);

app.listen(PORT,
    console.log(`Server running on port: ${PORT}!`)
);


esse era o server.js
agr o controller e a rota:

controller:


import genResult from "../../results.js";
import pool from "../../db.js";
import bcrypt from 'bcrypt';
import 'dotenv/config';
import {v4 as uuidv4} from 'uuid';

async function checkHashedPass(passwd, hash) {
    const result = genResult();

    try {
        const match = await bcrypt.compare(passwd, hash);

        result.success = match;
        result.others = {
            match: match
        };

    } catch (err) {
        result.success = false;
        result.message = `
        Internal server error in checkHashedPass():
        Error message: ${err.message},
        Error: ${err.stack}`;
        result.others = {
            error: err
        };

        console.error(result.message);

    } finally {
        return result;
    }
};

async function signIn(tName, tPass) {
    const result = genResult();

    try {
        const {rows: dataFromDB} = await pool.query(`
            SELECT tName, tPass FROM travelers WHERE tName = ($1)
        `, [tName]);
        
        if (dataFromDB.length === 0) {
            throw new Error('UserNotFound', {reason: 'User arent in database, check the credentials'});
            //console.log('Throw new error: UserNotFound') // Just 4 debug

        };

        const callCheckHashedPass = await checkHashedPass(tPass, dataFromDB[0].tpass);
        const matchMap = {
            true: {
                message: `User ${dataFromDB[0].tname} succesfuly signed In`,
                status: 200
            },
            false: {
                message: `signIn failed: check credentials`,
                status: 403
            }
        };
        
        result.status = parseInt(matchMap[callCheckHashedPass.success].status) ;
        result.success = callCheckHashedPass.success;
        result.message = matchMap[callCheckHashedPass.success].message;
        result.others = {
            signIn: callCheckHashedPass.success,
            user: dataFromDB[0].tname
        };

        console.log(result.message);

    } catch (err) {
        const errorStatusMap = {
            UserNotFound: {
                status: 404,
                message: `
                User Not Found in database, check if he signedUp;
                Error: ${err.message}`
            }
        };

        result.status = errorStatusMap[err.message].status || 500;
        result.success = false;
        result.message = errorStatusMap[err.message].message || `
        Internal server error in signInTravelerController, signIn func:
        Error: ${err}`;

        console.error(result.message);

    } finally {
        return result
    };
};

async function signInRouter(req, res) {
    const {tn, tp} = req.body;

    const callSignIn = await signIn(tn, tp);
    const {rows: user} = await pool.query(`
        SELECT TravelerID, AccessLevel FROM travelers WHERE tName = ($1)`
    , [tn]);

    if (callSignIn.success) {
        console.log('uuid before');
        const sessionID = uuidv4();
        console.log('uuid after');
        console.log('alevel before');
        const sessionAccessLevel = user[0].accesslevel;
        console.log('alevel after');
        console.log('uid before');
        const sessionUserID = user[0].travelerid;
        console.log('uid after');
        
        console.log('cookie set before');
        const cookie4set = {
            sessionID: sessionID,
            userID: sessionUserID,
            AccessLevel: sessionAccessLevel
        };
        console.log('cookie set after');
        console.log('session.cookie4set before');
        req.session.cookie4set = cookie4set;
        console.log('session.cookie4set after');
        console.log('expires before');
        req.session.cookie.expires = new Date(Date.now() + 259200000);
        console.log('expires after');
    };

    res.status(callSignIn.status).json(callSignIn);
    console.log('res after');
};

export default signInRouter;


rota:

import e from "express";
import signInRouter from "../../controllers/travelers/signInTravelerController.js";

const r = e.Router();

r.post('/api/signIn', signInRouter);

export default r


saida:



> 18-04-25@1.0.0 dev
> nodemon server.js

[nodemon] 3.1.9
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,cjs,json
[nodemon] starting `node server.js`
Successfuly connected!
Server running on port: 3001!
Table 'planes' successfuly created!
Table 'travels' successfuly created!
Table 'finances' successfuly created!
Table 'travelers' successfuly created!
User yyax succesfuly signed In
uuid before
uuid after
alevel before
alevel after
uid before
uid after
cookie set before
cookie set after
session.cookie4set before
session.cookie4set after
expires before
expires after
res after


mas dai no postman, nenhum cookie Ã© setado
oq fazer?